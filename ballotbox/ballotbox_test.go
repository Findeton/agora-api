package ballotbox

import (
	"fmt"
	"github.com/agoravoting/agora-http-go/middleware"
	stest "github.com/agoravoting/agora-http-go/server/testing"
	"net/http"
	"testing"
	"bytes"
	"time"

	"flag"
	"strconv"
	"os"
    "crypto/tls"
    "strings"
)

var (
	port int
    host *string
	// sharedsecret duplicated here, once used in below test, the other in config passed to server, must match.
	SharedSecret = "somesecret"
    newVote string
	Config       = `{
	"Debug": true,
	"DbMaxIddleConnections": 5,
	"DbConnectString": "user=ballotbox password=ballotbox dbname=ballotbox_test sslmode=disable",
    "ballotboxSessionExpire": 1000000,
	"maxWrites": 2,
    "SharedSecret": "somesecret",
	"Admins": ["test@example.com"],
	"ActiveModules": [
		"github.com/agoravoting/agora-api/ballotbox"
	],
	"RavenDSN": "",
    "electionDir": "../admin/elections"
}`
)

const (
    voteJson = `{"a": "encrypted-vote-v1", "choices": [{"alpha": "49425087192676759456844848082138391507740529686393110137255545685158849333741737665298141205208087738250990727603108840130556397131892699236422650587536782871705218770688462314084239353055484242156609764895317279233982362121896385969913312454595453295854007088041274274694959408934280481502803518821541514381505875819037291799343287331067191495372501625404557542073010223394423635356072458502158567850690380072204876670764781168808523609821134169693293364361504035404667574811326741955722325655903419830009805738291324782708480198846923266519232249475130484720055813242823819846556682089104666869651179242495984784312", "beta": "42766178099023436464555215991174951103197199599976965869545626259049083250020068148707533917453335684455706049099045580971029677459674946244781961642744931049820394358775990539071713410817319116692863530466263473570672397968504143762019451645140005418842754390396263276776464172094941775557526801327667058756849070682496121857681623666989453004790897652030730950905083354252554158902749124005099177745071606324364219249418671507574284221964482048078565933709475576347159004554932808076836250271376656332287276641883355185409983661336931427492957215529153124734971578686081721038667085765540543498448924807684758558531"}, {"alpha": "33655020435292882624842466963265888529812378239893278644777653634630890853349835521079614518753802505845740503585136967378509489555127727938509259068317478167703148146882647062669128600707452506682483722467781066594902284310910542036814294782071913546382815323769453189602311934725995946216078445949412510064209664621222368055673196805122747431538214005470609049078238179209391276227004346233785215429482956426428690066075387060726889591712386463113067691388278663660174694151778680585079124952823212861712607655574770814982344159872194031050208499636302552933754009067392490381503213702318691420208289591155811731902", "beta": "36968544157867652535590574893320277750611687462632369399734638468864061620843114129687467654423042540188623070151845500440535913803112531218922273083864919715735819002229500337891844619113077103722333542203542436455785085409916852615657990328086155649474260291220533089901827090290130733977619304042226633152510371133397958572266953735775132552108692157055308315002602040235298154916571659963480448176751087437810457694726911089875076583132890796798800785484741321725791793416514608062878826374076298998626124807516445592891225484123312539338186285070945728203537470379876076409011541237230344798072970422200778512689"}, {"alpha": "25356090496185563619766191910957193515535285896488748921015327473902403054365705232941242013261125099975879758952560094061965051492266802191300491171025701341512032229343472025801564114351191679205631246551358395978365131821507530384746848442237285383402736753131288396629016729629125418580682071019053412540018074666684664698819471818692000998129397918340566169038560888036819978482352173965564167105514546175233974566970490815138963528677937612039957373830199508898464764275592937727262194431906358915727779663147631081529221514759301354307955824108666277034754371400511900671131258083292143540779354104861145869782", "beta": "34368895454161924926272712458727942221184057453360378439158010593679192840430629695362799841683641290189885387707392949915541419764528759569568253877002203097274513705410868748289883406798255828011167680314415246388589093521308603557070284220445683998860080636862743484281785622866241367907361228334789667317904647736079133112299226303824002684093796847659821504725534763849663084748004140091620363549980462642926509348218654013326666865292911976960700594102822078913859599491587071896139664798275003259199097379738299286015803173231406056949603395991504702673515154565682973765114913313351669256461624208655246176963"}], "election_hash": {"a": "hash/sha256/value", "value": ""}, "issue_date": "2014-10-20T22:17:12+02:00", "proofs": [{"challenge": "103189326793970828721404930832303773372400031224978289902741581174903573897357", "commitment": "27343524493658047839914875247713429720455847410208343961956593794953128326429214943824692513789403146469333743465502308399119854385923555699580904924037365333087200481847554367568842389735030566160962838292079034388225910756898846471847215558527778587365764598158780669130336190492785369622652585112522339581286821944064312054856998855746708166949247031615513851603965942860108286904888465053386431624909783074681203725028570743345458112643120960125367526083113316934712668162205052947596622245986386700103824517093199765278211051961844081800861451453240522336204059313359307482014788195314954445450224303355847284317", "response": "3557696931212757046309521179614840009732754676642403057955607084946514492874043514030310425003695745435017930141981289440812234500404522139708357610047880812577224448300621132002467734349789836136688469038904024792947098120537771148463304064493452201128391976466090885168158695988442237807411565329682222306711435631119853641044733152086322077284277839606984636000966186451449387222375200583457241137517374363283921885961196788578598148150956739363866506890561535272835515744920113981252373650059522467081476655832408097379662828712048656813983180600696107909896106757530161655107157459503179657758885169269410368012"}, {"challenge": "114493241904087475242666501662877984950896197238077220693907324844342797407723", "commitment": "21952995882503712175286269399376478185278357402874684495884367375934627061223076220795113471454958406316822630418424487380693381111224195355024350488722313109980197330512627259100677740023696108505749568384325488886050147325640596014945326338177859632232796140302351503198978682197444587986700090713329718020503655236657010380809196402595998720582877787742351178211397761436094231939651410591152801162767116564786360435972711760694922915579912570505053382200919265974967235524194368229744558721409935190682929137058795962090447677974020735827998675342785068762104620936481601321551790019979223021132636773060121767923", "response": "1180478484451472365715997653036496116241159310067349088716798164150051374933744768748411909931554008136877540781667679265869678654191294897721075457845133456119365516823778170731613570776774159252452917971611307757665109540629748400013110053259047056499917039507583536783877359918865879687839666599072552349866334876420948659531017662466411857072673993437716122558086940649142091295341373111933628597173756507625363313259505573038946393822621730993537419492104725037758059399720314661104876520972157939804403012952660755792891780345143310411924162580259221449853817997290053132990000616198072708954931135759864439014"}, {"challenge": "106498863671346238205944816991283442110478506872319890389065111315294245040101", "commitment": "48087472567553197891294533060539026519113702732516320048636483380612132078552669462686426119327568321594592462757685562318114001975456541697547765039875561736031902621528760840308848629303984507974935050516008209597552829010646929862803262708300422090379387212043077572485953227399730258632306229391593021577590793440643573392908884405948503708024191141466516185282661411104208207525108776806298221885420077219324090355140339141055187550720245127527799137069068678169911250978914579256471129616961661147680330183771475166869845385001247767390257089694304541627477572764135314315836925353709045712644687184158455005701", "response": "9713406734525719554928983005084499549898679847239634916924662388722240822946052014977472380542076470453182881202328090212005139986370141982056278246186705215910635954377564060291969727973481279349214151476129484039378982278498443035373945515388818603109180831449914074845919587979578341996290419964376543859124494738470716292376626024046807956094763606621196295743337669468827474316890290174173054890083707366957331534301650988528239891418938568591687539548012832805363635057869827118261423285446233397655797536805430210255116553873143927407611806642062220857957375782510103627692854677336847697778899523975117508378"}]}`
    voteHash = "54d69773ac8f15e63b4d8bffbc76d4afafb32ff759f57c5e863ced4ef2997a4a"
    // vote generated in init function (bottom of file)
    _newVote = `{
        "vote": "%s",
        "vote_hash": "%s"
    }`
)

func TestAgoraApi(t *testing.T) {
	ts := stest.New(t, Config)
	defer ts.TearDown()
	voteAuth := map[string]string{"Authorization": middleware.AuthHeader("voter-1020-1", SharedSecret)}

	posted := ts.RequestJson("POST", "/api/v1/ballotbox/election/1020/vote/1", http.StatusAccepted, voteAuth, newVote)
	fmt.Printf("new vote %v\n", posted)
	posted = ts.RequestJson("POST", "/api/v1/ballotbox/election/1020/vote/1", http.StatusAccepted, voteAuth, newVote)
	fmt.Printf("new vote %v\n", posted)

	foundVote := ts.Request("GET", fmt.Sprintf("/api/v1/ballotbox/election/1020/check-hash/1/%s", voteHash), http.StatusOK, voteAuth, "")
	fmt.Printf("found vote %v\n", foundVote)

    // will only work if there is an election (config.json) with election-id 1020 in admin/elections
    ts.RequestJson("GET", "/api/v1/ballotbox/election/1020/config/1", http.StatusOK, voteAuth, newVote)
}

// used to benchmark a remote server
func BenchmarkApi(b *testing.B) {
    // reads config from config.json
    /* confStr, err := util.Contents("../config.json")
    if err != nil {
        b.Errorf("error reading config %v", err)
        return
    }
    var s map[string]interface{}
    err = json.Unmarshal([]byte(confStr), &s)
    if err != nil {
        b.Errorf("error parsing config %v", err)
        return
    }

    secret := s["SharedSecret"].(string)*/
    secret := SharedSecret

	b.ResetTimer()
    b.SetParallelism(10)

	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
    		now := time.Now()
	    	voterId := now.Nanosecond()
            // posting
            // header := fmt.Sprintf("voter-1-%d", voterId)
	    	// url := fmt.Sprintf("http://%s:%d/api/v1/ballotbox/election/1/vote/%d", *host, port, voterId)

            // get config
            header := fmt.Sprintf("voter-1306-%d", voterId)
            url := fmt.Sprintf("https://%s:%d/api/v1/ballotbox/election/1306/config/%d", *host, port, voterId)

            voteAuth := map[string]string{"Authorization": middleware.AuthHeader(header, secret)}
	    	// resp := request("POST", url, voteAuth, newVote, b)
            resp := request("GET", url, voteAuth, "", b)
	    	// for post
            // if resp != nil && resp.StatusCode != http.StatusAccepted {
            // for get config
            if resp != nil && resp.StatusCode != http.StatusOK {
	 			b.Errorf("bad status code %d", resp.StatusCode)
	    	}
	    }
	})

    /*c := make(chan string)
    start := time.Now()

    routines := 30

    for j:= 0; j < routines; j++ {
    	go func(){
    		for i := 0; i < 10; i++ {
	    		now := time.Now()
	        	voterId := now.Nanosecond()
	        	header := fmt.Sprintf("voter-1306-%d", voterId)
                url := fmt.Sprintf("https://%s:%d/api/v1/ballotbox/election/1306/config/%d", *host, port, voterId)
                voteAuth := map[string]string{"Authorization": middleware.AuthHeader(header, secret)}
                // resp := request("POST", url, voteAuth, newVote, b)
                fmt.Printf("=>")
                resp := request("GET", url, voteAuth, "", b)
                fmt.Printf("|")
                // if resp != nil && resp.StatusCode != http.StatusAccepted {
                if resp != nil && resp.StatusCode != http.StatusOK {
                    b.Errorf("bad status code %d", resp.StatusCode)
                }
	        }
        	c <- "ok"
		}()
    }

    for j:= 0; j < routines; j++ {
    	<- c
    }
    delta := time.Now().Sub(start)
    fmt.Printf("elapsed %f", float64(delta) / 1000000000)*/

    return
}

// used by benchmark to test against a remote server
func request(method string, path string, headers map[string]string, requesTBody string, b *testing.B) *http.Response {
    // skip certificate validation
    tr := &http.Transport{
        TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
    }

    client := &http.Client{Transport: tr}
    r, err := http.NewRequest(method, path, bytes.NewBufferString(requesTBody))
    if err != nil {
        b.Errorf("error creating request %v", err)
    }

    for key, value := range headers {
        r.Header.Set(key, value)
    }
    resp, err := client.Do(r)
    if err != nil {
        b.Errorf("error executing request %v", err)
    }

    return resp
}

// used to parse command line arguments when running benchmark against remote server
// (see http://golang.org/pkg/flag/ example)
func init() {
	var err error

	addr := flag.String("port", "3000", "http port")
    host = flag.String("host", "localhost", "http host address")

	flag.Parse()
	port, err = strconv.Atoi(*addr); if err != nil {
    	fmt.Printf("*** error parsing port %v\n", err)
        os.Exit(1)
    }
    str := strings.Replace(voteJson, `"`, `\"`, -1)
    newVote = fmt.Sprintf(_newVote, str, voteHash)
}